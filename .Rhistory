BD_20210714 <- read.csv2("C:/Users/tvzgo/OneDrive/Área de Trabalho/programação/Aulas/MTI/dados/BD_20210714.csv")
View(BD_20210714)
View(BD_20210714)
name (BD_20210714)
View(BD_20210714)
(BD_20210714)
head(BD_20210714)
(BD_20210714)
(BD_20210714)
head(BD_20210714)
tail(BD_20210714)
str(BD_20210714)
summary(BD_20210714)
BD_20210714 [1:6,]
BD_20210714 [1:6,NOME_MUNIC] 'head - uma coluna'
BD_20210714 [1:6,2] 'head - uma coluna'
BD_20210714 [1:6,2]
BD_20210714 [1:6,2] 'head - uma coluna'
"nnnnnn"
#5. explorando os dados
View(BD_20210714) #função View(), que permite a visualização interativa de uma tabela, existem diversas outras funções que permitem explorar uma base de dados
install.packages("stringi")
profvis::profvis({BD_20210714 [1:6,] })
BD_20210714 [1:6,'NOME_MUNIC']
BD_20210714 [1:6,]$NOME_MUNIC
BD_20210714 [1:6,c('NOME_MUNIC', 'RM')]
BD_20210714 [ which(BD_20210714$RM=='são paulo')]
BD_20210714 [ which(BD_20210714$RM== "São Paulo")]
BD_20210714 [ which(BD_20210714$RM == 'São Paulo' & BD_20210714$POP > 500000)]
BD_20210714 [ which(BD_20210714$RM == 'São Paulo' & BD_20210714$POP > 500000),c('NOME_MUNIC', 'POP')]
BD_20210714 [ which(BD_20210714$RM == 'São Paulo' & BD_20210714$POP > 500000),c('NOME_MUNIC','POP')]
BD_20210714 [ which(BD_20210714$RM == 'São Paulo' & BD_20210714$POP > 500000),c("NOME_MUNIC","POP")]
BD_20210714 [ which(BD_20210714$RM == 'São Paulo' & BD_20210714$POP_2010 > 500000),c("NOME_MUNIC","POP_2010")]
BD_20210714 [ which(BD_20210714$RM == 'São Paulo' & BD_20210714$POP_2010 > 200000),c("NOME_MUNIC","POP_2010")]
BD_20210714 [ which(BD_20210714$RM == 'São Paulo' & BD_20210714$POP_2010 > 200000),c("NOME_MUNIC","POP_2010")] #filtro (RMSP e pop>200k) com colunas muni e pop
BD_20210714 [ which(BD_20210714$RM == 'São Paulo' & BD_20210714$POP_2010 > 250000),c("NOME_MUNIC","POP_2010")] #filtro (RMSP e pop>250k) com colunas muni e pop
table(BD_20210714$POP_2010)
table(BD_20210714$REG)
table(BD_20210714$RM)
table(BD_20210714$RM, BD_20210714$PART_16)
# MTI
Repositório dos exercícios da aula de MTI
install.packages("reticulate")
library(reticulate)
reticulate::repl_python()
install.packages("reticulate")
install.packages("reticulate")
install_python()
yes
reticulate::repl_python()
print("teste")
quit
library(tidyverse) # é necessário abrir o pacote todas as vezes que o programa R/RStudio é aberto ou a sessão é reiniciada.
#4. importando base de dados
BD_20210714 <- read.csv2("C:/Users/tvzgo/OneDrive/Área de Trabalho/programação/Aulas/MTI/dados/BD_20210714.csv")
#5. explorando os dados
View(BD_20210714) #função View(), que permite a visualização interativa de uma tabela, existem diversas outras funções que permitem explorar uma base de dados
names(BD_20210714) #A função names() exibe o nome de todas as variáveis da base de dados no Console
head(BD_20210714) #A função head() exibe as primeiras observações da base de dados no Console, sem a necessidade de abrir uma nova aba em Source
tail(BD_20210714) #A função tail(), de forma similar, exibe as últimas observações da base de dados no Console.'
str(BD_20210714) #A função str() exibe a estrutura da base de dados, com a classe da base de dados, o número de observações e variáveis, o nome de cada variável, a classe de cada variável (se é numérica, lógica, caractére ou outra) e as primeiras observações
summary(BD_20210714)#A função summary() apresenta um sumário de estatísticas descritivas (mínimo, 1º quartil, mediana, média, 3º quartil, máximo e valores faltantes - NA’s) para todas as variáveis numéricas
#6. criando um subconjunto
BD_20210714 [1:6,] #similar ao head
BD_20210714 [1:6,2] #head + seleção de uma coluna (numero)
BD_20210714 [1:6,'NOME_MUNIC'] #head + seleção de uma coluna (nome da coluna)
BD_20210714 [1:6,]$NOME_MUNIC #head + seleção de uma coluna (operador $)
BD_20210714 [1:6,c('NOME_MUNIC', 'RM')] #head + seleção de duas colunas (função concatenar)
BD_20210714 [ which(BD_20210714$RM == 'São Paulo' & BD_20210714$POP_2010 > 250000),c("NOME_MUNIC","POP_2010")] #filtro (RMSP e pop>250k) com colunas muni e pop
#7. criando tabela de contigência
table(BD_20210714$RM) #contagem da variavel RM
table(BD_20210714$RM, BD_20210714$PART_16) #tabela RM x Partido em 2016
#8. definindo uma nova variável
BD_20210714$VEIC_HAB <- BD_20210714$VEIC_2016 / BD_20210714$POP_2016
#criando a relação veiculo/habitante
#9. calculando estatísticas básicas
#argumento opcional na.rm = TRUE para remover os valores faltantes (NA).
mean(BD_20210714$VEIC_HAB, na.rm = TRUE) #calulando a média
median(BD_20210714$VEIC_HAB, na.rm = TRUE) #calulando a mediana
var(BD_20210714$VEIC_HAB, na.rm = TRUE) #calulando a variancia
sd(BD_20210714$VEIC_HAB, na.rm = TRUE) #calulando o desvio padrão
#9. desenhando graficos
#box-plot
boxplot(BD_20210714$VEIC_HAB)
#histograma
hist(BD_20210714$VEIC_HAB)
#qqplot
qqnorm(BD_20210714$VEIC_HAB)
qqline(BD_20210714$VEIC_HAB, col = "red")
#10. exportando gráficos
#pgn() para selecionar a figura e dev.off() para finalizar o comando
# box-plot
png("graficos/boxplot_vec_hab16.png")
boxplot(BD_20210714$VEIC_HAB)
dev.off()
#histograma
png("graficos/hist_vec_hab16.png")
hist(BD_20210714$VEIC_HAB)
dev.off()
#qqplot
png("graficos/qqplot_vec_hab16.png")
qqnorm(BD_20210714$VEIC_HAB)
qqline(BD_20210714$VEIC_HAB, col = "red")
dev.off()
#11. exportanto a base de dados
write.csv2 (BD_20210714, "dados/BD_20210718.csv", row.names = FALSE)
first_part <- "hello"
second_part <- "world"
first_part + second_part
paste(first_part, second_part)
x <- 1 + 1
y <- 100
z <- x + y
x <- 1 + 1
y <- 100
z <- x + y
typeof(first_part)   # "character"
typeof(z)            # "double"
some_logical <- TRUE
another_logical <- FALSE
# Vector
some_vector <- c(1, 2, 3, 4, 5)
another_vector <- c(6, 7, 8, 9, 10)
combined_vector <- c(some_vector, another_vector)
# Vector has to be same data type
c("hello", 100)
# List
list("hello", 100)
first_column <- combined_vector
second_column <- c("h", "e", "l", "l", "o", "w", "o", "r", "l", "d")
some_df <- data.frame(first_column, second_column, stringsAsFactors=FALSE)
View(some_df)
View(some_df)
some_df
# Index on vector
combined_vector[1]   # One value
combined_vector[1:4]    # Multiple values, c(1, 2, 3, 4)
combined_vector[ c(5, 6) ] # Middle of the vector
some_df[,1]    # First column vector
some_df[1,]    # First row as list
some_df[1, 1]  # Value from first column and row
some_df[1:2,]  # First two rows
# Access by name
some_df$first_column
some_df$second_column
some_df$second_column[3:8]
# Subsetting on a condition
subset(some_df, first_column > 5)
subset(some_df, second_column == "w")
subset(some_df, second_column == "w" | first_column > 8)
table(first_column)
table(c(1,1,1,1,1,2,2,2,10))
plot(some_vector, another_vector)
head(some_df)
summary(some_df)
str(some_df)
dim(some_df)
length(some_df[,1])
install.packages("foreign")
library("foreign")
?summary
